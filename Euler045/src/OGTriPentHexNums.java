import java.util.ArrayList;

/**
 * 
 */

/*

Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle	 	T(n)=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	P(n)=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	H(n)=n(2n−1)	 	1, 6, 15, 28, 45, ...
It can be verified that T(285) = P(165) = H(143) = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
 */

/**
 * @author dillonrichey
 *
 */
public class OGTriPentHexNums {

	/**
	 * @param args
	 */
	public static void main(String[] args) {

		// ArrayLists to store triangular, pentagonal, and hexagonal numbers
		ArrayList<Long> triNums = new ArrayList<Long>();
		ArrayList<Long> pentNums = new ArrayList<Long>();
		ArrayList<Long> hexNums = new ArrayList<Long>();

		// the number of numbers that are triangular, pentagonal, and hexagonal
		int values = 0;

		/*
		 * Since the values for hexagonal numbers increase faster than those of
		 * triangular or pentagonal numbers, we'll iterate through those values and
		 * check for them in the other two lists.
		 */
//		for (int i = 2; i < hexNums.size(); i++) {
//
//			/*
//			 * Since the values for pentagonal numbers increase the second fastest, we'll
//			 * check the list of pentagonal numbers for each hexagonal number. Finally, if a
//			 * number is both hexagonal and pentagonal, we'll check if it is also
//			 * triangular.
//			 */
//
//			long num = hexNums.get(i);
//			if (pentNums.contains(num)) {
//
//				if (triNums.contains(num)) {
//
//					values++;
//
//					System.out.println(num + " is triangular, pentagonal, and hexagonal!");
//				}
//
//			}
//
//		}

		for (int i = 0; values < 4; i++) {

			// Fill ArrayLists with values
			pentNums.add(pentNum(i));
			hexNums.add(hexNum(i));
			
			long num = triNum(i);

			if (pentNums.contains(num)) {
				if (hexNums.contains(num)) {
					values++;
					System.out.println(num + " is triangular, pentagonal, and hexagonal!");
				}
			}
			System.out.println(num);

		}

	}

	public static long triNum(int n) {

		long t = (n * (n + 1)) / 2;

		return t;

	}

	public static long pentNum(int n) {

		long p = (n * ((3 * n) - 1)) / 2;

		return p;
	}

	public static long hexNum(int n) {

		long h = n * ((2 * n) - 1);

		return h;
	}

}
